{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nimport { ImpactStyle, NotificationType } from './definitions';\nexport class HapticsWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.selectionStarted = false;\n  }\n  async impact(options) {\n    const pattern = this.patternForImpact(options === null || options === void 0 ? void 0 : options.style);\n    this.vibrateWithPattern(pattern);\n  }\n  async notification(options) {\n    const pattern = this.patternForNotification(options === null || options === void 0 ? void 0 : options.type);\n    this.vibrateWithPattern(pattern);\n  }\n  async vibrate(options) {\n    const duration = (options === null || options === void 0 ? void 0 : options.duration) || 300;\n    this.vibrateWithPattern([duration]);\n  }\n  async selectionStart() {\n    this.selectionStarted = true;\n  }\n  async selectionChanged() {\n    if (this.selectionStarted) {\n      this.vibrateWithPattern([70]);\n    }\n  }\n  async selectionEnd() {\n    this.selectionStarted = false;\n  }\n  patternForImpact() {\n    let style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ImpactStyle.Heavy;\n    if (style === ImpactStyle.Medium) {\n      return [43];\n    } else if (style === ImpactStyle.Light) {\n      return [20];\n    }\n    return [61];\n  }\n  patternForNotification() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NotificationType.Success;\n    if (type === NotificationType.Warning) {\n      return [30, 40, 30, 50, 60];\n    } else if (type === NotificationType.Error) {\n      return [27, 45, 50];\n    }\n    return [35, 65, 21];\n  }\n  vibrateWithPattern(pattern) {\n    if (navigator.vibrate) {\n      navigator.vibrate(pattern);\n    } else {\n      throw this.unavailable('Browser does not support the vibrate API');\n    }\n  }\n}","map":{"version":3,"names":["WebPlugin","ImpactStyle","NotificationType","HapticsWeb","constructor","selectionStarted","impact","options","pattern","patternForImpact","style","vibrateWithPattern","notification","patternForNotification","type","vibrate","duration","selectionStart","selectionChanged","selectionEnd","arguments","length","undefined","Heavy","Medium","Light","Success","Warning","Error","navigator","unavailable"],"sources":["/app/streaksnap-clean/node_modules/@capacitor/haptics/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport { ImpactStyle, NotificationType } from './definitions';\nimport type {\n  HapticsPlugin,\n  ImpactOptions,\n  NotificationOptions,\n  VibrateOptions,\n} from './definitions';\n\nexport class HapticsWeb extends WebPlugin implements HapticsPlugin {\n  selectionStarted = false;\n\n  async impact(options?: ImpactOptions): Promise<void> {\n    const pattern = this.patternForImpact(options?.style);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async notification(options?: NotificationOptions): Promise<void> {\n    const pattern = this.patternForNotification(options?.type);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async vibrate(options?: VibrateOptions): Promise<void> {\n    const duration = options?.duration || 300;\n    this.vibrateWithPattern([duration]);\n  }\n\n  async selectionStart(): Promise<void> {\n    this.selectionStarted = true;\n  }\n\n  async selectionChanged(): Promise<void> {\n    if (this.selectionStarted) {\n      this.vibrateWithPattern([70]);\n    }\n  }\n\n  async selectionEnd(): Promise<void> {\n    this.selectionStarted = false;\n  }\n\n  private patternForImpact(style: ImpactStyle = ImpactStyle.Heavy): number[] {\n    if (style === ImpactStyle.Medium) {\n      return [43];\n    } else if (style === ImpactStyle.Light) {\n      return [20];\n    }\n    return [61];\n  }\n\n  private patternForNotification(\n    type: NotificationType = NotificationType.Success,\n  ): number[] {\n    if (type === NotificationType.Warning) {\n      return [30, 40, 30, 50, 60];\n    } else if (type === NotificationType.Error) {\n      return [27, 45, 50];\n    }\n    return [35, 65, 21];\n  }\n\n  private vibrateWithPattern(pattern: number[]) {\n    if (navigator.vibrate) {\n      navigator.vibrate(pattern);\n    } else {\n      throw this.unavailable('Browser does not support the vibrate API');\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,eAAe;AAQ7D,OAAM,MAAOC,UAAW,SAAQH,SAAS;EAAzCI,YAAA;;IACE,KAAAC,gBAAgB,GAAG,KAAK;EA0D1B;EAxDE,MAAMC,MAAMA,CAACC,OAAuB;IAClC,MAAMC,OAAO,GAAG,IAAI,CAACC,gBAAgB,CAACF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,KAAK,CAAC;IACrD,IAAI,CAACC,kBAAkB,CAACH,OAAO,CAAC;EAClC;EAEA,MAAMI,YAAYA,CAACL,OAA6B;IAC9C,MAAMC,OAAO,GAAG,IAAI,CAACK,sBAAsB,CAACN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEO,IAAI,CAAC;IAC1D,IAAI,CAACH,kBAAkB,CAACH,OAAO,CAAC;EAClC;EAEA,MAAMO,OAAOA,CAACR,OAAwB;IACpC,MAAMS,QAAQ,GAAG,CAAAT,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,QAAQ,KAAI,GAAG;IACzC,IAAI,CAACL,kBAAkB,CAAC,CAACK,QAAQ,CAAC,CAAC;EACrC;EAEA,MAAMC,cAAcA,CAAA;IAClB,IAAI,CAACZ,gBAAgB,GAAG,IAAI;EAC9B;EAEA,MAAMa,gBAAgBA,CAAA;IACpB,IAAI,IAAI,CAACb,gBAAgB,EAAE;MACzB,IAAI,CAACM,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEjC;EAEA,MAAMQ,YAAYA,CAAA;IAChB,IAAI,CAACd,gBAAgB,GAAG,KAAK;EAC/B;EAEQI,gBAAgBA,CAAA,EAAuC;IAAA,IAAtCC,KAAA,GAAAU,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqBnB,WAAW,CAACsB,KAAK;IAC7D,IAAIb,KAAK,KAAKT,WAAW,CAACuB,MAAM,EAAE;MAChC,OAAO,CAAC,EAAE,CAAC;KACZ,MAAM,IAAId,KAAK,KAAKT,WAAW,CAACwB,KAAK,EAAE;MACtC,OAAO,CAAC,EAAE,CAAC;;IAEb,OAAO,CAAC,EAAE,CAAC;EACb;EAEQZ,sBAAsBA,CAAA,EACqB;IAAA,IAAjDC,IAAA,GAAAM,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyBlB,gBAAgB,CAACwB,OAAO;IAEjD,IAAIZ,IAAI,KAAKZ,gBAAgB,CAACyB,OAAO,EAAE;MACrC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;KAC5B,MAAM,IAAIb,IAAI,KAAKZ,gBAAgB,CAAC0B,KAAK,EAAE;MAC1C,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;IAErB,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACrB;EAEQjB,kBAAkBA,CAACH,OAAiB;IAC1C,IAAIqB,SAAS,CAACd,OAAO,EAAE;MACrBc,SAAS,CAACd,OAAO,CAACP,OAAO,CAAC;KAC3B,MAAM;MACL,MAAM,IAAI,CAACsB,WAAW,CAAC,0CAA0C,CAAC;;EAEtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}